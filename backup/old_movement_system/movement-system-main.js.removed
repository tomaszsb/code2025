/**
 * MovementSystem.js
 * Main entry point for the movement system
 * 
 * This file creates and connects all components of the movement system,
 * providing integration with GameStateManager and TurnManager
 */

// Wait for the document to be ready before initializing
document.addEventListener('DOMContentLoaded', function() {
  // Make sure GameStateManager exists
  if (!window.GameStateManager) {
    console.error("GameStateManager not found! Movement system cannot be initialized.");
    return;
  }

  console.log("Movement System: Beginning initialization...");
  
  /**
   * Initialize the movement system
   */
  function initializeMovementSystem() {
    // Add diceRollData property to GameStateManager if it doesn't exist
    if (!window.GameStateManager.diceRollData) {
      window.GameStateManager.diceRollData = [];
    }
    
    // Create the movement core
    const movementCore = new window.MovementCore(window.GameStateManager);
    console.log("Movement System: Core component created");
    
    // Create the movement logic using the core
    const movementLogic = new window.MovementLogic(window.GameStateManager, movementCore);
    console.log("Movement System: Logic component created");
    
    // Create the UI adapter using the logic
    const movementUIAdapter = new window.MovementUIAdapter(window.GameStateManager, movementLogic);
    console.log("Movement System: UI Adapter component created");
    
    // Store references in GameStateManager with property descriptors
    Object.defineProperties(window.GameStateManager, {
      // Add each component as a protected property
      movementCore: {
        value: movementCore,
        writable: false,
        configurable: false,
        enumerable: true
      },
      movementLogic: {
        value: movementLogic,
        writable: false,
        configurable: false,
        enumerable: true
      },
      movementUIAdapter: {
        value: movementUIAdapter,
        writable: false,
        configurable: false,
        enumerable: true
      }
    });
    
    // Extend GameStateManager with movement system methods (with protection)
    extendGameStateManager();
    
    // Integrate with TurnManager if it exists
    integrateTurnManager();
    
    // Load dice roll data during initialization
    loadDiceRollData();
    
    console.log("Movement System: Successfully initialized all components");
  }
  
  /**
   * Load dice roll data from CSV
   */
  function loadDiceRollData() {
    if (!window.GameStateManager) return;
    
    // Check if the CSV parser is available
    if (typeof window.csvParser === 'undefined') {
      console.warn("Movement System: CSV Parser not found, dice roll data cannot be loaded automatically");
      return;
    }
    
    // Use the CSV parser to load the dice roll data
    try {
      window.csvParser.loadCSV('data/DiceRoll Info.csv', function(data) {
        if (data && Array.isArray(data)) {
          window.GameStateManager.diceRollData = data;
          console.log(`Movement System: Loaded ${data.length} dice roll outcomes`);
        }
      });
    } catch (error) {
      console.error("Movement System: Error loading dice roll data:", error);
    }
  }
  
  /**
   * Extend GameStateManager with movement-specific functionality
   */
  function extendGameStateManager() {
    // Define function properties with descriptors for protection
    
    /**
     * Enhanced getAvailableMoves method that works with the new movement system
     * @param {Object} [player] - Optional player to get moves for, uses current player if not provided
     * @returns {Array|Object} Available moves or dice roll requirement object
     */
    Object.defineProperty(window.GameStateManager, 'getAvailableMoves', {
      value: function(player) {
        try {
          // Use provided player or current player
          const targetPlayer = player || this.getCurrentPlayer();
          if (!targetPlayer) {
            console.error('GameStateManager: No player available for getAvailableMoves');
            return [];
          }
          
          // Use movement logic to get available moves
          return this.movementLogic.getAvailableMoves(targetPlayer);
        } catch (error) {
          console.error('GameStateManager: Error in getAvailableMoves:', error);
          // Return empty array to prevent UI errors
          return [];
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Execute a move for a player
     * @param {string} playerId - ID of the player to move
     * @param {string} spaceId - ID of the space to move to
     * @returns {boolean} True if the move was successful
     */
    Object.defineProperty(window.GameStateManager, 'executeMove', {
      value: function(playerId, spaceId) {
        try {
          // If playerId not provided, use current player
          const actualPlayerId = playerId || (this.getCurrentPlayer() ? this.getCurrentPlayer().id : null);
          if (!actualPlayerId) {
            console.error('GameStateManager: No player ID for executeMove');
            return false;
          }
          
          // Use movement core to execute the move
          const result = this.movementCore.movePlayer(actualPlayerId, spaceId);
          
          // If successful, save game state
          if (result) {
            this.saveState();
            
            // Dispatch playerMoved event
            this.dispatchEvent('playerMoved', {
              playerId: actualPlayerId,
              toSpace: spaceId
            });
          }
          
          return result;
        } catch (error) {
          console.error('GameStateManager: Error in executeMove:', error);
          return false;
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Find a space by name (case-insensitive)
     * @param {string} name - Name of the space to find
     * @returns {Object|null} Space object or null if not found
     */
    Object.defineProperty(window.GameStateManager, 'findSpaceByName', {
      value: function(name) {
        try {
          if (!name || !this.spaces || !Array.isArray(this.spaces)) {
            return null;
          }
          
          // Try exact match first
          let space = this.spaces.find(s => s.name === name);
          
          // If not found, try case-insensitive match
          if (!space) {
            space = this.spaces.find(s => 
              s.name && s.name.toLowerCase() === name.toLowerCase()
            );
          }
          
          // If still not found, try to match with space names with description
          if (!space) {
            space = this.spaces.find(s => 
              s.name && s.name.toLowerCase().includes(name.toLowerCase())
            );
          }
          
          return space || null;
        } catch (error) {
          console.error('GameStateManager: Error in findSpaceByName:', error);
          return null;
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Find a player by ID
     * @param {string} id - ID of the player to find
     * @returns {Object|null} Player object or null if not found
     */
    Object.defineProperty(window.GameStateManager, 'findPlayerById', {
      value: function(id) {
        try {
          if (!id || !this.players || !Array.isArray(this.players)) {
            return null;
          }
          
          return this.players.find(p => p.id === id) || null;
        } catch (error) {
          console.error('GameStateManager: Error in findPlayerById:', error);
          return null;
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Check if a player has visited a specific space before
     * @param {Object} player - Player to check
     * @param {string} spaceName - Name of the space to check
     * @returns {boolean} True if player has visited the space
     */
    Object.defineProperty(window.GameStateManager, 'hasPlayerVisitedSpace', {
      value: function(player, spaceName) {
        try {
          if (!player || !player.visitHistory || !Array.isArray(player.visitHistory)) {
            return false;
          }
          
          return player.visitHistory.some(visit => 
            visit.spaceName === spaceName || 
            visit.spaceName.toLowerCase() === spaceName.toLowerCase()
          );
        } catch (error) {
          console.error('GameStateManager: Error in hasPlayerVisitedSpace:', error);
          return false;
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Load dice roll data from DiceRoll Info.csv
     */
    Object.defineProperty(window.GameStateManager, 'loadDiceRollData', {
      value: function() {
        try {
          // Check if data is already loaded
          if (this.diceRollData && this.diceRollData.length > 0) {
            return;
          }
          
          // Use fetch API to load the CSV
          fetch('data/DiceRoll Info.csv')
            .then(response => response.text())
            .then(csvText => {
              // Parse CSV (simple parsing)
              const lines = csvText.split('\n');
              const headers = lines[0].split(',');
              
              // Create array of objects
              this.diceRollData = [];
              
              for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue;
                
                const values = lines[i].split(',');
                const rowData = {};
                
                for (let j = 0; j < headers.length; j++) {
                  rowData[headers[j].trim()] = values[j] ? values[j].trim() : '';
                }
                
                this.diceRollData.push(rowData);
              }
              
              console.log(`GameStateManager: Loaded ${this.diceRollData.length} dice roll outcomes`);
            })
            .catch(error => {
              console.error('Error loading dice roll data:', error);
              this.diceRollData = [];
            });
        } catch (error) {
          console.error('GameStateManager: Error in loadDiceRollData:', error);
          this.diceRollData = [];
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Enhanced saveState method that saves additional movement data
     */
    const originalSaveState = window.GameStateManager.saveState;
    Object.defineProperty(window.GameStateManager, 'saveState', {
      value: function() {
        try {
          // Make sure each player has required movement properties
          if (this.players && Array.isArray(this.players)) {
            this.players.forEach(player => {
              if (!player.visitHistory) {
                player.visitHistory = [];
              }
              
              // Ensure previousPosition is set
              if (!player.previousPosition && player.position) {
                player.previousPosition = player.position;
              }
              
              // Ensure properties exist for persistence
              if (!player.properties) {
                player.properties = {};
              }
              
              // Save movement data in properties
              player.properties.visitHistory = player.visitHistory;
              player.properties.previousPosition = player.previousPosition;
              player.properties.hasUsedCheatBypass = player.hasUsedCheatBypass;
            });
          }
          
          // Call original saveState method
          return originalSaveState.call(this);
        } catch (error) {
          console.error('GameStateManager: Error in saveState:', error);
          // Try to call original even if our additions fail
          return originalSaveState.call(this);
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
    
    /**
     * Connect UI adapter to a game board component
     * @param {Object} gameBoard - React component for the game board
     */
    Object.defineProperty(window.GameStateManager, 'connectGameBoard', {
      value: function(gameBoard) {
        try {
          if (this.movementUIAdapter) {
            this.movementUIAdapter.setGameBoard(gameBoard);
          }
        } catch (error) {
          console.error('GameStateManager: Error in connectGameBoard:', error);
        }
      },
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  
  /**
   * Integrate with TurnManager if it exists
   */
  function integrateTurnManager() {
    // Check if TurnManager exists
    if (!window.TurnManager) {
      console.log('TurnManager not found, skipping integration');
      return;
    }
    
    console.log('Integrating Movement System with TurnManager');
    
    try {
      // Hook into TurnManager's createPlayerSnapshot method
      const originalCreatePlayerSnapshot = window.TurnManager.createPlayerSnapshot;
      if (originalCreatePlayerSnapshot) {
        window.TurnManager.createPlayerSnapshot = function(player) {
          // Call original method to get base snapshot
          const baseSnapshot = originalCreatePlayerSnapshot.call(this, player);
          
          // Add movement data to snapshot
          const movementSnapshot = window.GameStateManager.movementCore.createPlayerMovementSnapshot(player);
          
          // Combine snapshots
          return { ...baseSnapshot, ...movementSnapshot };
        };
      }
      
      // Hook into TurnManager's restorePlayerFromSnapshot method
      const originalRestorePlayerFromSnapshot = window.TurnManager.restorePlayerFromSnapshot;
      if (originalRestorePlayerFromSnapshot) {
        window.TurnManager.restorePlayerFromSnapshot = function(player, snapshot) {
          // Call original method to restore base data
          originalRestorePlayerFromSnapshot.call(this, player, snapshot);
          
          // Restore movement data from snapshot
          window.GameStateManager.movementCore.restorePlayerMovementFromSnapshot(player, snapshot);
        };
      }
      
      console.log('TurnManager integration complete');
    } catch (error) {
      console.error('Error integrating with TurnManager:', error);
    }
  }
  
  // Start the initialization process
  initializeMovementSystem();
});
