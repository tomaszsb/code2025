/**
 * MovementSystem.js
 * Main entry point for the movement system
 * 
 * This file creates and connects all components of the movement system,
 * providing integration with GameStateManager and TurnManager
 */

console.log('MovementSystem.js file is beginning to be used');

// First check if GameStateManager exists
if (!window.GameStateManager) {
  console.error("GameStateManager not found! Movement system cannot be initialized.");
} else {
  console.log("Movement System: Beginning initialization...");
  
  try {
    // Create the movement core
    const movementCore = new window.MovementCore(window.GameStateManager);
    console.log("Movement System: Core component created");
    
    // Create the movement logic using the core
    const movementLogic = new window.MovementLogic(window.GameStateManager, movementCore);
    console.log("Movement System: Logic component created");
    
    // Create the UI adapter using the logic
    const movementUIAdapter = new window.MovementUIAdapter(window.GameStateManager, movementLogic);
    console.log("Movement System: UI Adapter component created");
    
    // Add the components to GameStateManager directly
    window.GameStateManager.movementCore = movementCore;
    window.GameStateManager.movementLogic = movementLogic;
    window.GameStateManager.movementUIAdapter = movementUIAdapter;
    
    // Add necessary methods to GameStateManager
    
    // Enhanced getAvailableMoves method
    window.GameStateManager.getAvailableMoves = function(player) {
      // Use provided player or current player
      const targetPlayer = player || this.getCurrentPlayer();
      if (!targetPlayer) {
        console.error('GameStateManager: No player available for getAvailableMoves');
        return [];
      }
      
      // Use movement logic to get available moves
      return this.movementLogic.getAvailableMoves(targetPlayer);
    };
    
    // executeMove method
    window.GameStateManager.executeMove = function(playerId, spaceId) {
      // If playerId not provided, use current player
      const actualPlayerId = playerId || (this.getCurrentPlayer() ? this.getCurrentPlayer().id : null);
      if (!actualPlayerId) {
        console.error('GameStateManager: No player ID for executeMove');
        return false;
      }
      
      // Use movement core to execute the move
      const result = this.movementCore.movePlayer(actualPlayerId, spaceId);
      
      // If successful, save game state
      if (result) {
        this.saveState();
        
        // Dispatch playerMoved event
        this.dispatchEvent('playerMoved', {
          playerId: actualPlayerId,
          toSpace: spaceId
        });
      }
      
      return result;
    };
    
    // findSpaceByName method
    window.GameStateManager.findSpaceByName = function(name) {
      if (!name || !this.spaces || !Array.isArray(this.spaces)) {
        return null;
      }
      
      // Try exact match first
      let space = this.spaces.find(s => s.name === name);
      
      // If not found, try case-insensitive match
      if (!space) {
        space = this.spaces.find(s => 
          s.name && s.name.toLowerCase() === name.toLowerCase()
        );
      }
      
      // If still not found, try to match with space names with description
      if (!space) {
        space = this.spaces.find(s => 
          s.name && s.name.toLowerCase().includes(name.toLowerCase())
        );
      }
      
      return space || null;
    };
    
    // findPlayerById method
    window.GameStateManager.findPlayerById = function(id) {
      if (!id || !this.players || !Array.isArray(this.players)) {
        return null;
      }
      
      return this.players.find(p => p.id === id) || null;
    };
    
    // hasPlayerVisitedSpace method
    window.GameStateManager.hasPlayerVisitedSpace = function(player, spaceName) {
      if (!player || !player.visitHistory || !Array.isArray(player.visitHistory)) {
        return false;
      }
      
      return player.visitHistory.some(visit => 
        visit.spaceName === spaceName || 
        visit.spaceName.toLowerCase() === spaceName.toLowerCase()
      );
    };
    
    // Add the connectGameBoard method
    window.GameStateManager.connectGameBoard = function(gameBoard) {
      if (this.movementUIAdapter) {
        this.movementUIAdapter.setGameBoard(gameBoard);
        console.log("Movement System: Successfully connected to GameBoard");
      } else {
        console.error("Movement System: Could not connect to GameBoard - movementUIAdapter not found");
      }
    };
    
    // Integrate with TurnManager if it exists
    if (window.TurnManager) {
      console.log('Integrating Movement System with TurnManager');
      
      // Hook into TurnManager's createPlayerSnapshot method
      const originalCreatePlayerSnapshot = window.TurnManager.createPlayerSnapshot;
      if (originalCreatePlayerSnapshot) {
        window.TurnManager.createPlayerSnapshot = function(player) {
          // Call original method to get base snapshot
          const baseSnapshot = originalCreatePlayerSnapshot.call(this, player);
          
          // Add movement data to snapshot
          const movementSnapshot = window.GameStateManager.movementCore.createPlayerMovementSnapshot(player);
          
          // Combine snapshots
          return { ...baseSnapshot, ...movementSnapshot };
        };
      }
      
      // Hook into TurnManager's restorePlayerFromSnapshot method
      const originalRestorePlayerFromSnapshot = window.TurnManager.restorePlayerFromSnapshot;
      if (originalRestorePlayerFromSnapshot) {
        window.TurnManager.restorePlayerFromSnapshot = function(player, snapshot) {
          // Call original method to restore base data
          originalRestorePlayerFromSnapshot.call(this, player, snapshot);
          
          // Restore movement data from snapshot
          window.GameStateManager.movementCore.restorePlayerMovementFromSnapshot(player, snapshot);
        };
      }
      
      console.log('TurnManager integration complete');
    } else {
      console.log('TurnManager not found, skipping integration');
    }
    
    console.log("Movement System: Successfully initialized all components");
  } catch (error) {
    console.error("Movement System: Initialization failed:", error);
  }
}

console.log('MovementSystem.js code execution finished');
